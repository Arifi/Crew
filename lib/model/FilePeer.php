<?php



/**
 * Skeleton subclass for performing query and update operations on the 'file' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Mon Oct 24 09:36:19 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class FilePeer extends BaseFilePeer {

  const ADDED    = 'A';
  const MODIFIED = 'M';
  const DELETED  = 'D';

  /**
   * @static
   * @param Branch $branch
   * @return void
   */
  public static function synchronize(Branch $branch)
  {
    $filesGit = GitCommand::getDiffFilesFromBranch($branch->getRepository()->getValue(), $branch->getCommitReference(), $branch->getLastCommit());

    $filesModel = FileQuery::create()
      ->filterByBranchId($branch->getId())
      ->find()
    ;

    foreach ($filesModel as $fileModel)
    {
      /** @var $fileModel File */
      if (!array_key_exists($fileModel->getFilename(), $filesGit))
      {
        $fileModel->delete();
      }
      else
      {
        $lastChangeCommit = GitCommand::getLastModificationCommit($branch->getRepository()->getValue(), $branch->getName(), $fileModel->getFilename());
        if($lastChangeCommit != $fileModel->getLastChangeCommit())
        {
          $fileModel->setStatus(BranchPeer::A_TRAITER)
            ->setState($filesGit[$fileModel->getFilename()]['state'])
            ->setLastChangeCommit($lastChangeCommit)
            ->setCommitStatusChanged($lastChangeCommit)
            ->setCommitInfos(GitCommand::getCommitInfos($branch->getRepository()->getValue(), $lastChangeCommit, "%ce %s"))
            ->setNbAddedLines($filesGit[$fileModel->getFilename()]['added-lines'])
            ->setNbDeletedLines($filesGit[$fileModel->getFilename()]['deleted-lines'])
            ->setCommitReference($branch->getCommitReference())
          ;
        }
        $fileModel->save();
      }

      unset($filesGit[$fileModel->getFilename()]);
    }

    foreach ($filesGit as $fileGit)
    {
      $lastChangeCommit = GitCommand::getLastModificationCommit($branch->getRepository()->getValue(), $branch->getName(), $fileGit['filename']);
      $file = new File();
      $file->setFilename($fileGit['filename'])
        ->setStatus(BranchPeer::A_TRAITER)
        ->setState($fileGit['state'])
        ->setBranchId($branch->getId())
        ->setLastChangeCommit($lastChangeCommit)
        ->setCommitInfos(GitCommand::getCommitInfos($branch->getRepository()->getValue(), $lastChangeCommit, "%ce %s"))
        ->setNbAddedLines($fileGit['added-lines'])
        ->setNbDeletedLines($fileGit['deleted-lines'])
        ->setCommitReference($branch->getCommitReference())
        ->save()
      ;
    }
  }
} // FilePeer
